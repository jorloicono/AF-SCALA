// DEFINO UN METODO

def add(a: Int, b: Int): Int = a + b

// LO UTILIZO

val x = add(1, 2)   // 3

// LAS COLECCIONES DE SCALA Y LOS OBJETOS PROPIOS TIENEN UN MONTON DE METODOS PRECREADOS

val x2 = List(1, 2, 3)

x2.size          // 3
x2.contains(1)   // true
x2.map(_ * 10)   // List(10, 20, 30)

// LOS METODOS PUEDEN TENER MAS DE UNA LINEA

def addThenDouble(a: Int, b: Int): Int =
  // imagine that this body requires multiple lines
  val sum = a + b
  sum * 2

addThenDouble(1, 1)

// Y NO NECESITAN UN RETURN

// PUEDO TENER PARAMETROS DEFINIDOS POR DEFECTO

def makeConnection(timeout: Int = 5_000, protocol: String = "http") =
  println(f"timeout = ${timeout}%d, protocol = ${protocol}%s")

makeConnection()                 // timeout = 5000, protocol = http
makeConnection(2_000)            // timeout = 2000, protocol = http
makeConnection(3_000, "https")   // timeout = 3000, protocol = https

// USANDO IF EN EL CUERPO DE UN METODO 

def isTruthy(a: Any) =
  if a == 0 || a == "" || a == false then
    false
  else
    true

isTruthy(0)      // false
isTruthy("")     // false
isTruthy("hi")   // true
isTruthy(1.0)    // true

// VISIBILIDAD DE LOS METODOS

// POR DEFECTO ES PUBLICO

class Dog:
  def speak() = println("Woof")

val d = new Dog
d.speak()   // prints "Woof"

// SI LO HAGO PRIVADO NO PUEDO LLAMARLO DESDE OTRAS CLASES QUE HEREDEN Y MUCHO MENOS SOBREESCRIBIRLO

class Animal:
  private def breathe() = println("I’m breathing")

//class Cat extends Animal:
  // this method won’t compile
  //override def breathe() = println("Yo, I’m totally breathing")

// SI QUIERES HACER UN MÉTODO PRIVADO PARA LA CLASE ACTUAL Y TAMBIÉN PERMITIR QUE LAS SUBCLASES LO LLAMEN O LO SOBREESCRIBAN, MARCA EL MÉTODO COMO PROTEGIDO, COMO SE MUESTRA CON EL MÉTODO SPEAK EN ESTE EJEMPLO:

class Animal2:
  private def breathe() = println("I’m breathing")
  def walk() =
    breathe()
    println("I’m walking")
  protected def speak() = println("Hello?")

class Cat2 extends Animal2:
  override def speak() = println("Meow")

val cat = new Cat2
cat.walk()
cat.speak()
//cat.breathe()   // won’t compile because it’s private

// POR ULTIMO IMAGINA QUE TIENES ESTA CLASE 

case class Circle(x: Double, y: Double, radius: Double)

// IMAGINA QUE NO HAS AGREGADO NINGUN METODO Y AHORA LOS QUIERES AGREGAR,

// NO HAY PROBLEMA, PUEDES USAR LOS EXTEND METHODS

extension (c: Circle)
  def circumference: Double = c.radius * math.Pi * 2
  def diameter: Double = c.radius * 2
  def area: Double = math.Pi * c.radius * c.radius

// DE ESTA MANERA AGREGAS ESOS METODOS A LA CLASE

val aCircle = Circle(5,10,20)
aCircle.circumference
aCircle.diameter
aCircle.area